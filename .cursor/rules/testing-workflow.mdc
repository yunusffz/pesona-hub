---
globs: *.test.ts,*.spec.ts,*.test.js,*.spec.js
description: Testing standards and development workflow guidelines
---

# Testing and Development Workflow

## Testing Structure

- Unit tests in `tests/unit/` directory
- Integration tests in `tests/integration/` directory
- E2E tests in `tests/e2e/` directory
- Use `.test.ts` or `.spec.ts` extensions

## Testing Patterns

```typescript
// Component testing with Vue Test Utils
import { mount } from "@vue/test-utils";
import { describe, it, expect } from "vitest";

describe("Navbar Component", () => {
  it("renders navigation links", () => {
    const wrapper = mount(Navbar);
    expect(wrapper.find('[data-testid="nav-links"]').exists()).toBe(true);
  });
});
```

## Development Scripts

- `pnpm dev` - Start development server
- `pnpm build` - Build for production
- `pnpm generate` - Generate static site
- `pnpm preview` - Preview production build

## Code Quality

- Use TypeScript strict mode
- Follow ESLint rules for Vue and TypeScript
- Use Prettier for code formatting
- Implement proper error boundaries

## Git Workflow

- Use conventional commits: `feat:`, `fix:`, `docs:`, `style:`, `refactor:`, `test:`
- Create feature branches from `main`
- Use descriptive commit messages
- Keep commits atomic and focused

## Performance Monitoring

- Use Nuxt's built-in performance metrics
- Monitor bundle size with `nuxt analyze`
- Implement lazy loading for heavy components
- Use `defineAsyncComponent` for code splitting

## Environment Configuration

- Use `.env` files for environment variables
- Define types for environment variables
- Use `useRuntimeConfig()` for accessing config
- Keep sensitive data in server-side only
