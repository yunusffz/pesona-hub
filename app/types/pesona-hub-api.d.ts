/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/analytics/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log Activity */
        post: operations["log_activity_analytics_log_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Activity Logs */
        get: operations["get_activity_logs_analytics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/{entity_type}/{entity_id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Entity Stats */
        get: operations["get_entity_stats_analytics__entity_type___entity_id__stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/trending/{entity_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Trending Entities */
        get: operations["get_trending_entities_analytics_trending__entity_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/{entity_type}/{entity_id}/count/{event_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Event Count */
        get: operations["get_event_count_analytics__entity_type___entity_id__count__event_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register */
        post: operations["register_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh Token */
        post: operations["refresh_token_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations["logout_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Revoke All Tokens */
        post: operations["revoke_all_tokens_auth_revoke_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/certifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Certifications */
        get: operations["get_certifications_certifications_get"];
        put?: never;
        /** Create Certification */
        post: operations["create_certification_certifications_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/certifications/{certification_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Certification */
        get: operations["get_certification_certifications__certification_id__get"];
        /** Update Certification */
        put: operations["update_certification_certifications__certification_id__put"];
        post?: never;
        /** Delete Certification */
        delete: operations["delete_certification_certifications__certification_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/commodities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Commodities */
        get: operations["get_commodities_commodities_get"];
        put?: never;
        /** Create Commodity */
        post: operations["create_commodity_commodities_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/commodities/{commodity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Commodity */
        get: operations["get_commodity_commodities__commodity_id__get"];
        /** Update Commodity */
        put: operations["update_commodity_commodities__commodity_id__put"];
        post?: never;
        /** Delete Commodity */
        delete: operations["delete_commodity_commodities__commodity_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/commodities/category/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Commodities By Category */
        get: operations["get_commodities_by_category_commodities_category__category__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/province-apis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Province Apis */
        get: operations["get_province_apis_harvesting_province_apis_get"];
        put?: never;
        /** Create Province Api */
        post: operations["create_province_api_harvesting_province_apis_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/province-apis/{api_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Province Api */
        get: operations["get_province_api_harvesting_province_apis__api_id__get"];
        /** Update Province Api */
        put: operations["update_province_api_harvesting_province_apis__api_id__put"];
        post?: never;
        /** Delete Province Api */
        delete: operations["delete_province_api_harvesting_province_apis__api_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/harvest/{api_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Harvest Province Api */
        post: operations["harvest_province_api_harvesting_harvest__api_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/harvest-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Harvest All Province Apis */
        post: operations["harvest_all_province_apis_harvesting_harvest_all_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Harvesting Status */
        get: operations["get_harvesting_status_harvesting_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/validate-api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate Province Api */
        post: operations["validate_province_api_harvesting_validate_api_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/scheduler/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Scheduled Jobs */
        get: operations["get_scheduled_jobs_harvesting_scheduler_jobs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/scheduler/jobs/daily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Daily Job */
        post: operations["add_daily_job_harvesting_scheduler_jobs_daily_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/scheduler/jobs/hourly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Hourly Job */
        post: operations["add_hourly_job_harvesting_scheduler_jobs_hourly_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/scheduler/jobs/weekly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Weekly Job */
        post: operations["add_weekly_job_harvesting_scheduler_jobs_weekly_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/scheduler/jobs/custom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Custom Job */
        post: operations["add_custom_job_harvesting_scheduler_jobs_custom_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/scheduler/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Job */
        delete: operations["remove_job_harvesting_scheduler_jobs__job_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/scheduler/jobs/{job_id}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pause Job */
        post: operations["pause_job_harvesting_scheduler_jobs__job_id__pause_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/scheduler/jobs/{job_id}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resume Job */
        post: operations["resume_job_harvesting_scheduler_jobs__job_id__resume_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/scheduler/jobs/{job_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Job Status */
        get: operations["get_job_status_harvesting_scheduler_jobs__job_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/tasks/{task_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Task Status */
        get: operations["get_task_status_harvesting_tasks__task_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/tasks/{task_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel Task */
        post: operations["cancel_task_harvesting_tasks__task_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/queue/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Queue Stats */
        get: operations["get_queue_stats_harvesting_queue_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/queue/cleanup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cleanup Old Tasks */
        post: operations["cleanup_old_tasks_harvesting_queue_cleanup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/harvesting/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_harvesting_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Files */
        get: operations["get_files_files_get"];
        put?: never;
        /** Upload File */
        post: operations["upload_file_files_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get File */
        get: operations["get_file_files__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{object_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get File Object */
        get: operations["get_file_object_files__object_name__get"];
        put?: never;
        post?: never;
        /** Delete File */
        delete: operations["delete_file_files__object_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/financing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Financings */
        get: operations["get_financings_financing_get"];
        put?: never;
        /** Create Financing */
        post: operations["create_financing_financing_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/financing/{financing_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Financing */
        get: operations["get_financing_financing__financing_id__get"];
        /** Update Financing */
        put: operations["update_financing_financing__financing_id__put"];
        post?: never;
        /** Delete Financing */
        delete: operations["delete_financing_financing__financing_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/financing/type/{financing_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Financings By Type */
        get: operations["get_financings_by_type_financing_type__financing_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Locations */
        get: operations["get_locations_locations_get"];
        put?: never;
        /** Create Location */
        post: operations["create_location_locations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations/{location_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Location */
        get: operations["get_location_locations__location_id__get"];
        /** Update Location */
        put: operations["update_location_locations__location_id__put"];
        post?: never;
        /** Delete Location */
        delete: operations["delete_location_locations__location_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations/province/{province}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Locations By Province */
        get: operations["get_locations_by_province_locations_province__province__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations/nearby": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Nearby Locations */
        get: operations["get_nearby_locations_locations_nearby_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Products */
        get: operations["get_products_products_get"];
        put?: never;
        /** Create Product */
        post: operations["create_product_products_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Product */
        get: operations["get_product_products__product_id__get"];
        /** Update Product Full */
        put: operations["update_product_full_products__product_id__put"];
        post?: never;
        /** Delete Product */
        delete: operations["delete_product_products__product_id__delete"];
        options?: never;
        head?: never;
        /** Patch Product */
        patch: operations["patch_product_products__product_id__patch"];
        trace?: never;
    };
    "/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Settings */
        get: operations["get_settings_settings_get"];
        put?: never;
        /** Create Setting */
        post: operations["create_setting_settings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Setting */
        get: operations["get_setting_settings__key__get"];
        /** Update Setting Full */
        put: operations["update_setting_full_settings__key__put"];
        post?: never;
        /** Delete Setting */
        delete: operations["delete_setting_settings__key__delete"];
        options?: never;
        head?: never;
        /** Patch Setting */
        patch: operations["patch_setting_settings__key__patch"];
        trace?: never;
    };
    "/social-forestry-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Social Forestry Group List */
        get: operations["get_social_forestry_group_list_social_forestry_groups_get"];
        put?: never;
        /** Create Social Forestry Group */
        post: operations["create_social_forestry_group_social_forestry_groups_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/social-forestry-groups/{social_forestry_group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Social Forestry Group */
        get: operations["get_social_forestry_group_social_forestry_groups__social_forestry_group_id__get"];
        /** Update Social Forestry Group Full */
        put: operations["update_social_forestry_group_full_social_forestry_groups__social_forestry_group_id__put"];
        post?: never;
        /** Delete Social Forestry Group */
        delete: operations["delete_social_forestry_group_social_forestry_groups__social_forestry_group_id__delete"];
        options?: never;
        head?: never;
        /** Patch Social Forestry Group */
        patch: operations["patch_social_forestry_group_social_forestry_groups__social_forestry_group_id__patch"];
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Users */
        get: operations["get_users_users_get"];
        put?: never;
        /** Create User */
        post: operations["create_user_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User */
        get: operations["get_user_users__username__get"];
        /** Update User Full */
        put: operations["update_user_full_users__username__put"];
        post?: never;
        /** Delete User */
        delete: operations["delete_user_users__username__delete"];
        options?: never;
        head?: never;
        /** Patch User */
        patch: operations["patch_user_users__username__patch"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** APIValidationResponse */
        APIValidationResponse: {
            /** Valid */
            valid: boolean;
            /** Status Code */
            status_code?: number | null;
            /** Has Meta */
            has_meta?: boolean | null;
            /** Has Data */
            has_data?: boolean | null;
            /** Data Count */
            data_count?: number | null;
            /** Response Time */
            response_time?: number | null;
            /** Error */
            error?: string | null;
        };
        /**
         * AccessType
         * @enum {string}
         */
        AccessType: "public" | "internal" | "private";
        /** ActivityLogDetailResponse */
        ActivityLogDetailResponse: {
            /** Id */
            id: number;
            /** Event Type */
            event_type: string;
            /** Access Type */
            access_type: string;
            /** Entity Type */
            entity_type: string;
            /** Entity Id */
            entity_id?: number | null;
            /** Entity Slug */
            entity_slug?: string | null;
            /** User Id */
            user_id?: number | null;
            /** User Agent */
            user_agent?: string | null;
            /** Ip Address */
            ip_address?: string | null;
            /** Endpoint */
            endpoint?: string | null;
            /** Method */
            method?: string | null;
            /** Referer */
            referer?: string | null;
            /** Extra Data */
            extra_data?: {
                [key: string]: unknown;
            } | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** BaseResponse[APIValidationResponse] */
        BaseResponse_APIValidationResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["APIValidationResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[ActivityLogDetailResponse] */
        BaseResponse_ActivityLogDetailResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["ActivityLogDetailResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[CertificationResponse] */
        BaseResponse_CertificationResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["CertificationResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[CommodityResponse] */
        BaseResponse_CommodityResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["CommodityResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[Dict[str, Any]] */
        BaseResponse_Dict_str__Any__: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[EntityStatsResponse] */
        BaseResponse_EntityStatsResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["EntityStatsResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[FileResponse] */
        BaseResponse_FileResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["FileResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[FinancingResponse] */
        BaseResponse_FinancingResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["FinancingResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[HarvestingRunResponse] */
        BaseResponse_HarvestingRunResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["HarvestingRunResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[LocationResponse] */
        BaseResponse_LocationResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["LocationResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[Product] */
        BaseResponse_Product_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["Product"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[ProvinceAPIResponse] */
        BaseResponse_ProvinceAPIResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["ProvinceAPIResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[SettingResponse] */
        BaseResponse_SettingResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["SettingResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[SocialForestryGroupResponse] */
        BaseResponse_SocialForestryGroupResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["SocialForestryGroupResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[TrendingListResponse] */
        BaseResponse_TrendingListResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["TrendingListResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[Union[FileResponse, NoneType]] */
        BaseResponse_Union_FileResponse__NoneType__: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["FileResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[Union[Product, NoneType]] */
        BaseResponse_Union_Product__NoneType__: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["Product"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[Union[SettingResponse, Dict[str, Any]]] */
        BaseResponse_Union_SettingResponse__Dict_str__Any___: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["SettingResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[Union[UserResponse, NoneType]] */
        BaseResponse_Union_UserResponse__NoneType__: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["UserResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[UserResponse] */
        BaseResponse_UserResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["UserResponse"] | {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[dict] */
        BaseResponse_dict_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** BaseResponse[list] */
        BaseResponse_list_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: unknown[] | {
                [key: string]: unknown;
            } | null;
        };
        /** Body_add_custom_job_harvesting_scheduler_jobs_custom_post */
        Body_add_custom_job_harvesting_scheduler_jobs_custom_post: {
            /**
             * Job Id
             * @description Unique job ID
             */
            job_id: string;
            /**
             * Cron Expression
             * @description Cron expression (e.g., '0 2 * * *' for daily at 2 AM)
             */
            cron_expression: string;
            /**
             * Name
             * @description Job name
             */
            name?: string | null;
        };
        /** Body_add_daily_job_harvesting_scheduler_jobs_daily_post */
        Body_add_daily_job_harvesting_scheduler_jobs_daily_post: {
            /**
             * Hour
             * @description Hour to run (24-hour format)
             * @default 2
             */
            hour: number;
            /**
             * Minute
             * @description Minute to run
             * @default 0
             */
            minute: number;
        };
        /** Body_add_weekly_job_harvesting_scheduler_jobs_weekly_post */
        Body_add_weekly_job_harvesting_scheduler_jobs_weekly_post: {
            /**
             * Day Of Week
             * @description Day of week (0=Monday, 6=Sunday)
             * @default 0
             */
            day_of_week: number;
            /**
             * Hour
             * @description Hour to run (24-hour format)
             * @default 3
             */
            hour: number;
            /**
             * Minute
             * @description Minute to run
             * @default 0
             */
            minute: number;
        };
        /** Body_login_auth_login_post */
        Body_login_auth_login_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /**
             * Password
             * Format: password
             */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /**
             * Client Secret
             * Format: password
             */
            client_secret?: string | null;
        };
        /** Body_upload_file_files_post */
        Body_upload_file_files_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Description */
            description?: string | null;
        };
        /** Body_validate_province_api_harvesting_validate_api_post */
        Body_validate_province_api_harvesting_validate_api_post: {
            /** Api Url */
            api_url: string;
            /** Api Key */
            api_key?: string | null;
        };
        /**
         * CategoryFile
         * @enum {string}
         */
        CategoryFile: "DATASET" | "FILE";
        /** CertificationCreate */
        CertificationCreate: {
            /**
             * Name
             * @description Certification name
             * @example ISO 14001
             * @example FSC Certification
             */
            name: string;
            /**
             * Description
             * @description Certification description
             * @example Environmental management system certification
             */
            description?: string | null;
        };
        /** CertificationResponse */
        CertificationResponse: {
            /**
             * Id
             * @description Certification ID
             */
            id: number;
            /**
             * Name
             * @description Certification name
             */
            name: string;
            /**
             * Description
             * @description Certification description
             */
            description?: string | null;
            /**
             * Status
             * @description Certification status
             */
            status: string;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
        };
        /** CertificationUpdate */
        CertificationUpdate: {
            /**
             * Name
             * @description Certification name
             */
            name?: string | null;
            /**
             * Description
             * @description Certification description
             */
            description?: string | null;
            /**
             * Status
             * @description Certification status
             */
            status?: string | null;
        };
        /** CommodityCreate */
        CommodityCreate: {
            /**
             * Name
             * @description Commodity name
             * @example Coffee
             * @example Rubber
             * @example Cocoa
             */
            name: string;
            /**
             * Description
             * @description Commodity description
             * @example High quality arabica coffee beans
             */
            description?: string | null;
            /**
             * Category
             * @description Commodity category
             * @example Agricultural
             * @example Forestry
             */
            category?: string | null;
        };
        /** CommodityResponse */
        CommodityResponse: {
            /**
             * Id
             * @description Commodity ID
             */
            id: number;
            /**
             * Name
             * @description Commodity name
             */
            name: string;
            /**
             * Description
             * @description Commodity description
             */
            description?: string | null;
            /**
             * Category
             * @description Commodity category
             */
            category?: string | null;
            /**
             * Status
             * @description Commodity status
             */
            status: string;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
        };
        /** CommodityUpdate */
        CommodityUpdate: {
            /**
             * Name
             * @description Commodity name
             */
            name?: string | null;
            /**
             * Description
             * @description Commodity description
             */
            description?: string | null;
            /**
             * Category
             * @description Commodity category
             */
            category?: string | null;
            /**
             * Status
             * @description Commodity status
             */
            status?: string | null;
        };
        /** EntityStatsResponse */
        EntityStatsResponse: {
            /** Entity Type */
            entity_type: string;
            /** Entity Id */
            entity_id: number | null;
            /**
             * Stats
             * @description Event counts by type
             */
            stats: {
                [key: string]: number;
            };
            /**
             * Total
             * @description Total events
             */
            total: number;
        };
        /**
         * EntityType
         * @enum {string}
         */
        EntityType: "location" | "product" | "social_forestry_group" | "financing" | "transaction" | "user" | "page" | "login" | "logout";
        /** ErrorDetail */
        ErrorDetail: {
            /**
             * Msg
             * @description Error message
             */
            msg: string;
            /**
             * Loc
             * @description Location of the error (field path, e.g. ['body', 'field_name'])
             */
            loc: ({
                [key: string]: unknown;
            } | string | number)[] | unknown[] | {
                [key: string]: unknown;
            } | null;
        };
        /** ErrorResponse */
        ErrorResponse: {
            /**
             * @description Response code, use from Status Code
             * @example INTERNAL_ERROR
             */
            message_code: components["schemas"]["Status"];
            /**
             * Detail
             * @description List of error details, typically for internal server errors
             * @example [
             *       {
             *         "loc": [
             *           "server"
             *         ],
             *         "msg": "Unexpected server error occurred"
             *       }
             *     ]
             */
            detail: components["schemas"]["ErrorDetail"][];
        };
        /**
         * EventType
         * @enum {string}
         */
        EventType: "view" | "download" | "upload" | "create" | "update" | "delete" | "share" | "export" | "api_access" | "click" | "authenticate";
        /** FileResponse */
        FileResponse: {
            /** Id */
            id: number;
            /** Filename */
            filename: string;
            category: components["schemas"]["CategoryFile"];
            /** Bucket Name */
            bucket_name: string | null;
            /** Object Name */
            object_name: string;
            /** Content Type */
            content_type: string;
            /** Size */
            size: number;
            /** Description */
            description: string | null;
            /** Url */
            url: string;
            /** User Id */
            user_id: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** FinancingCreate */
        FinancingCreate: {
            /**
             * Name
             * @description Financing name
             * @example Green Investment Fund
             * @example Forest Development Grant
             */
            name: string;
            /**
             * Description
             * @description Financing description
             * @example Investment fund for sustainable forest management
             */
            description?: string | null;
            /**
             * @description Type of financing
             * @example GRANT
             * @example LOAN
             */
            financing_type: components["schemas"]["FinancingTypeEnum"];
            /**
             * Amount
             * @description Financing amount
             * @example 100000
             * @example 250000.5
             */
            amount?: number | null;
            /**
             * Currency
             * @description Currency
             * @example USD
             * @example IDR
             */
            currency?: string | null;
        };
        /** FinancingResponse */
        FinancingResponse: {
            /**
             * Id
             * @description Financing ID
             */
            id: number;
            /**
             * Name
             * @description Financing name
             */
            name: string;
            /**
             * Description
             * @description Financing description
             */
            description?: string | null;
            /** @description Type of financing */
            financing_type: components["schemas"]["FinancingTypeEnum"];
            /**
             * Amount
             * @description Financing amount
             */
            amount?: number | null;
            /**
             * Currency
             * @description Currency
             */
            currency?: string | null;
            /**
             * Status
             * @description Financing status
             */
            status: string;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
        };
        /**
         * FinancingTypeEnum
         * @enum {string}
         */
        FinancingTypeEnum: "GRANT" | "SOFT_LOAN" | "INVESTMENT" | "LOAN" | "CSR";
        /** FinancingUpdate */
        FinancingUpdate: {
            /**
             * Name
             * @description Financing name
             */
            name?: string | null;
            /**
             * Description
             * @description Financing description
             */
            description?: string | null;
            /** @description Type of financing */
            financing_type?: components["schemas"]["FinancingTypeEnum"] | null;
            /**
             * Amount
             * @description Financing amount
             */
            amount?: number | null;
            /**
             * Currency
             * @description Currency
             */
            currency?: string | null;
            /**
             * Status
             * @description Financing status
             */
            status?: string | null;
        };
        /** HarvestingRunResponse */
        HarvestingRunResponse: {
            /** Id */
            id: number;
            /** Province Api Id */
            province_api_id?: number | null;
            status: components["schemas"]["HarvestingStatus"];
            /** Started At */
            started_at?: string | null;
            /** Completed At */
            completed_at?: string | null;
            /** Records Processed */
            records_processed?: number | null;
            /** Records Created */
            records_created?: number | null;
            /** Records Updated */
            records_updated?: number | null;
            /** Records Failed */
            records_failed?: number | null;
            /** Error Message */
            error_message?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * HarvestingStatus
         * @enum {string}
         */
        HarvestingStatus: "PENDING" | "RUNNING" | "COMPLETED" | "FAILED" | "CANCELLED";
        /** ListResponse[ActivityLogDetailResponse] */
        "ListResponse_ActivityLogDetailResponse_-Input": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["ActivityLogDetailResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[ActivityLogDetailResponse] */
        "ListResponse_ActivityLogDetailResponse_-Output": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["ActivityLogDetailResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[CertificationResponse] */
        "ListResponse_CertificationResponse_-Input": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["CertificationResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[CertificationResponse] */
        "ListResponse_CertificationResponse_-Output": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["CertificationResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[CommodityResponse] */
        ListResponse_CommodityResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["CommodityResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[FileResponse] */
        "ListResponse_FileResponse_-Input": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["FileResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[FileResponse] */
        "ListResponse_FileResponse_-Output": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["FileResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[FinancingResponse] */
        ListResponse_FinancingResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["FinancingResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[LocationResponse] */
        ListResponse_LocationResponse_: {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["LocationResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[Product] */
        "ListResponse_Product_-Input": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["Product"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[Product] */
        "ListResponse_Product_-Output": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["Product"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[ProvinceAPIResponse] */
        "ListResponse_ProvinceAPIResponse_-Input": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["ProvinceAPIResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[ProvinceAPIResponse] */
        "ListResponse_ProvinceAPIResponse_-Output": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["ProvinceAPIResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[SocialForestryGroupResponse] */
        "ListResponse_SocialForestryGroupResponse_-Input": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["SocialForestryGroupResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[SocialForestryGroupResponse] */
        "ListResponse_SocialForestryGroupResponse_-Output": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["SocialForestryGroupResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[Union[SettingResponse, Dict[str, Any]]] */
        "ListResponse_Union_SettingResponse__Dict_str__Any___-Input": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: (components["schemas"]["SettingResponse"] | {
                [key: string]: unknown;
            })[] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[Union[SettingResponse, Dict[str, Any]]] */
        "ListResponse_Union_SettingResponse__Dict_str__Any___-Output": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: (components["schemas"]["SettingResponse"] | {
                [key: string]: unknown;
            })[] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[UserResponse] */
        "ListResponse_UserResponse_-Input": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["UserResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** ListResponse[UserResponse] */
        "ListResponse_UserResponse_-Output": {
            /** @description Response code, use from Message Code */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Data
             * @description Response data, can be an array, dict, or None
             */
            data?: components["schemas"]["UserResponse"][] | {
                [key: string]: unknown;
            } | unknown[] | null;
            /**
             * Meta
             * @description Pagination metadata
             */
            meta?: components["schemas"]["MetaResponse"] | components["schemas"]["PaginationResponse"] | {
                [key: string]: unknown;
            } | null;
        };
        /** LocationCreate */
        LocationCreate: {
            /**
             * Hall
             * @description Hall name
             * @example Hall A
             * @example Main Hall
             */
            hall?: string | null;
            /**
             * Province
             * @description Province name
             * @example Jawa Tengah
             * @example Jawa Barat
             */
            province?: string | null;
            /**
             * Regency
             * @description Regency name
             * @example Semarang
             * @example Bandung
             */
            regency?: string | null;
            /**
             * District
             * @description District name
             * @example Semarang Selatan
             * @example Bandung Wetan
             */
            district?: string | null;
            /**
             * Village
             * @description Village name
             * @example Tembalang
             * @example Cicaheum
             */
            village?: string | null;
            /**
             * Secretary
             * @description Secretary name
             * @example John Doe
             * @example Jane Smith
             */
            secretary?: string | null;
            /**
             * Forestry Management Unit
             * @description Forest Management Unit
             * @example KPH Semarang
             * @example KPH Bandung
             */
            forestry_management_unit?: string | null;
            /**
             * Latitude
             * @description Latitude coordinate (-90 to 90)
             * @example -6.2088
             * @example -7.2575
             */
            latitude?: number | null;
            /**
             * Longitude
             * @description Longitude coordinate (-180 to 180)
             * @example 106.8456
             * @example 110.1403
             */
            longitude?: number | null;
        };
        /** LocationResponse */
        LocationResponse: {
            /**
             * Id
             * @description Location ID
             */
            id: number;
            /**
             * Hall
             * @description Hall name
             */
            hall?: string | null;
            /**
             * Province
             * @description Province name
             */
            province?: string | null;
            /**
             * Regency
             * @description Regency name
             */
            regency?: string | null;
            /**
             * District
             * @description District name
             */
            district?: string | null;
            /**
             * Village
             * @description Village name
             */
            village?: string | null;
            /**
             * Secretary
             * @description Secretary name
             */
            secretary?: string | null;
            /**
             * Forestry Management Unit
             * @description Forest Management Unit
             */
            forestry_management_unit?: string | null;
            /**
             * Latitude
             * @description Latitude coordinate
             */
            latitude?: number | null;
            /**
             * Longitude
             * @description Longitude coordinate
             */
            longitude?: number | null;
            /**
             * Status
             * @description Location status
             */
            status: string;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
        };
        /** LocationUpdate */
        LocationUpdate: {
            /**
             * Hall
             * @description Hall name
             */
            hall?: string | null;
            /**
             * Province
             * @description Province name
             */
            province?: string | null;
            /**
             * Regency
             * @description Regency name
             */
            regency?: string | null;
            /**
             * District
             * @description District name
             */
            district?: string | null;
            /**
             * Village
             * @description Village name
             */
            village?: string | null;
            /**
             * Secretary
             * @description Secretary name
             */
            secretary?: string | null;
            /**
             * Forestry Management Unit
             * @description Forest Management Unit
             */
            forestry_management_unit?: string | null;
            /**
             * Latitude
             * @description Latitude coordinate (-90 to 90)
             */
            latitude?: number | null;
            /**
             * Longitude
             * @description Longitude coordinate (-180 to 180)
             */
            longitude?: number | null;
            /**
             * Status
             * @description Location status
             */
            status?: string | null;
        };
        /** LogActivityRequest */
        LogActivityRequest: {
            /** @description Type of event to log */
            event_type: components["schemas"]["EventType"];
            /** @description Type of entity being tracked */
            entity_type: components["schemas"]["EntityType"];
            /**
             * Entity Id
             * @description Entity ID
             */
            entity_id?: number | null;
            /**
             * Entity Slug
             * @description Entity slug
             */
            entity_slug?: string | null;
            /**
             * @description Access type
             * @default public
             */
            access_type: components["schemas"]["AccessType"];
            /**
             * Extra Data
             * @description Additional metadata
             */
            extra_data?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * MessageCode
         * @enum {string}
         */
        MessageCode: "OPERATION_SUCCESSFUL" | "ITEM_NOT_FOUND" | "INPUT_VALIDATION_FAILED" | "USER_NOT_AUTHENTICATED" | "INSUFFICIENT_PERMISSION" | "INVALID_REQUEST_DATA" | "UNEXPECTED_SERVER_ERROR" | "RESOURCE_CONFLICT" | "UPDATE_SUCCESSFUL" | "ITEM_CREATED" | "ITEM_DELETED" | "INSUFFICIENT_PERMISSION";
        /** MetaResponse */
        MetaResponse: {
            /** @description Pagination metadata */
            pagination?: components["schemas"]["PaginationResponse"] | null;
        };
        /** PaginationResponse */
        PaginationResponse: {
            /**
             * Total
             * @description Total number of items
             */
            total: number;
            /**
             * Page
             * @description Current page number
             */
            page: number;
            /**
             * Page Size
             * @description Number of items per page
             */
            page_size: number;
            /**
             * Page Count
             * @description Total number of pages
             */
            page_count: number;
        };
        /** Product */
        Product: {
            /** Id */
            id?: number | null;
            /**
             * Social Forestry Group Id
             * @description Social Forestry Groups ID
             */
            social_forestry_group_id?: number | null;
            /**
             * Name
             * @description Product name
             */
            name: string;
            /**
             * Description
             * @description Product description
             */
            description?: string | null;
            /**
             * Status
             * @description Product status
             * @default ACTIVE
             */
            status: string;
            /**
             * Commodity Id
             * @description Commodity ID
             */
            commodity_id?: number | null;
            /**
             * Product Type
             * @description Product type
             */
            product_type?: string | null;
            /**
             * Value Chain
             * @description Value chain
             */
            value_chain?: string | null;
            /**
             * Updated At Src
             * @description Source update timestamp
             */
            updated_at_src?: string | null;
            /**
             * Economic Ts
             * @description Economic timestamp
             */
            economic_ts?: string | null;
            /**
             * Metadatas
             * @description metadatas data as JSON
             */
            metadatas?: {
                [key: string]: unknown;
            }[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at?: string;
        };
        /** ProductCreate */
        ProductCreate: {
            /**
             * External Id
             * @description External product ID
             */
            external_id: string;
            /**
             * Social Forestry Groups Id
             * @description KUPS ID
             */
            social_forestry_groups_id?: string | null;
            /**
             * Name
             * @description Product name
             */
            name: string;
            /**
             * Description
             * @description Product description
             */
            description?: string | null;
            /**
             * Commodity Id
             * @description Commodity ID
             */
            commodity_id?: number | null;
            /**
             * Product Type
             * @description Product type
             */
            product_type?: string | null;
            /** @description Value chain */
            value_chain?: components["schemas"]["ValueChain"] | null;
            /**
             * Metadatas
             * @description metadatas data as JSON
             */
            metadatas?: {
                [key: string]: unknown;
            }[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Economic Ts
             * @description Economic timestamp
             */
            economic_ts?: string | null;
            /**
             * @description Product status
             * @default ACTIVE
             */
            status: components["schemas"]["Status"] | null;
        };
        /** ProductUpdate */
        ProductUpdate: {
            /**
             * Name
             * @description Product name
             */
            name?: string | null;
            /**
             * Description
             * @description Product description
             */
            description?: string | null;
            /**
             * Social Forestry Group Id
             * @description Social Forestry Groups ID
             */
            social_forestry_group_id?: number | null;
            /**
             * Commodity Id
             * @description Commodity ID
             */
            commodity_id?: number | null;
            /**
             * Product Type
             * @description Product type
             */
            product_type?: string | null;
            /** @description Value chain */
            value_chain?: components["schemas"]["ValueChain"] | null;
            /**
             * Metadatas
             * @description metadatas data as JSON
             */
            metadatas?: {
                [key: string]: unknown;
            }[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Economic Ts
             * @description Economic timestamp
             */
            economic_ts?: string | null;
            /** @description Product status */
            status?: components["schemas"]["Status"] | null;
        };
        /** ProvinceAPICreate */
        ProvinceAPICreate: {
            /**
             * Province Name
             * @description Province name
             */
            province_name: string;
            /**
             * Api Url
             * @description API endpoint URL
             */
            api_url: string;
            /**
             * Api Key
             * @description API key if required
             */
            api_key?: string | null;
            /**
             * Description
             * @description API description
             */
            description?: string | null;
            /**
             * Rate Limit
             * @description Requests per minute
             * @default 60
             */
            rate_limit: number | null;
            /**
             * Timeout
             * @description Request timeout in seconds
             * @default 30
             */
            timeout: number | null;
            /**
             * Enabled
             * @description Whether API is enabled
             * @default true
             */
            enabled: boolean;
        };
        /** ProvinceAPIResponse */
        ProvinceAPIResponse: {
            /** Id */
            id: number;
            /** Province Name */
            province_name: string;
            /** Api Url */
            api_url: string;
            /** Api Key */
            api_key?: string | null;
            /** Description */
            description?: string | null;
            /** Rate Limit */
            rate_limit?: number | null;
            /** Timeout */
            timeout?: number | null;
            /** Enabled */
            enabled: boolean;
            /** Last Harvested */
            last_harvested?: string | null;
            /** Total Records */
            total_records?: number | null;
            /** Status */
            status: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** ProvinceAPIUpdate */
        ProvinceAPIUpdate: {
            /**
             * Province Name
             * @description Province name
             */
            province_name?: string | null;
            /**
             * Api Url
             * @description API endpoint URL
             */
            api_url?: string | null;
            /**
             * Api Key
             * @description API key if required
             */
            api_key?: string | null;
            /**
             * Description
             * @description API description
             */
            description?: string | null;
            /**
             * Rate Limit
             * @description Requests per minute
             */
            rate_limit?: number | null;
            /**
             * Timeout
             * @description Request timeout in seconds
             */
            timeout?: number | null;
            /**
             * Enabled
             * @description Whether API is enabled
             */
            enabled?: boolean | null;
            /**
             * Status
             * @description API status
             */
            status?: string | null;
        };
        /** RefreshTokenRequest */
        RefreshTokenRequest: {
            /** Refresh Token */
            refresh_token: string;
        };
        /** RegisterRequest */
        RegisterRequest: {
            /** Username */
            username: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Password
             * @description Password must meet security requirements
             */
            password: string;
            /** Name */
            name?: string | null;
            /**
             * @description User role
             * @default PARTNER
             */
            role: components["schemas"]["Roles"] | null;
        };
        /**
         * Roles
         * @enum {string}
         */
        Roles: "ADMINISTRATOR" | "PARTNER";
        /** SettingCreate */
        SettingCreate: {
            /** Key */
            key: string;
            /** Value */
            value?: {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** SettingResponse */
        SettingResponse: {
            /** Id */
            id: number;
            /** Key */
            key: string;
            /** Value */
            value?: {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /** SettingUpdate */
        SettingUpdate: {
            /** Key */
            key?: string | null;
            /** Value */
            value?: {
                [key: string]: unknown;
            } | unknown[] | null;
        };
        /**
         * SocialForestryGroupClass
         * @enum {string}
         */
        SocialForestryGroupClass: "SILVER" | "GOLD" | "PLATINUM";
        /** SocialForestryGroupCreate */
        SocialForestryGroupCreate: {
            /**
             * Name
             * @description Group name
             */
            name: string;
            /**
             * Secretary
             * @description Secretary name
             */
            secretary?: string | null;
            /** @description Group class */
            class_?: components["schemas"]["SocialForestryGroupClass"] | null;
            /**
             * Location Id
             * @description Location ID
             */
            location_id?: number | null;
            /**
             * Financing Id
             * @description Financing ID
             */
            financing_id?: number | null;
        };
        /** SocialForestryGroupResponse */
        SocialForestryGroupResponse: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Secretary */
            secretary?: string | null;
            class_?: components["schemas"]["SocialForestryGroupClass"] | null;
            /** Location Id */
            location_id?: number | null;
            /** Financing Id */
            financing_id?: number | null;
            /** Status */
            status: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** SocialForestryGroupUpdate */
        SocialForestryGroupUpdate: {
            /**
             * Name
             * @description Group name
             */
            name?: string | null;
            /**
             * Secretary
             * @description Secretary name
             */
            secretary?: string | null;
            /** @description Group class */
            class_?: components["schemas"]["SocialForestryGroupClass"] | null;
            /**
             * Location Id
             * @description Location ID
             */
            location_id?: number | null;
            /**
             * Financing Id
             * @description Financing ID
             */
            financing_id?: number | null;
            /**
             * Status
             * @description Group status
             */
            status?: string | null;
        };
        /**
         * Status
         * @enum {string}
         */
        Status: "ACTIVE" | "INACTIVE" | "DELETED" | "DRAFT";
        /** TokenResponse */
        TokenResponse: {
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            /** Expires In */
            expires_in: number;
        };
        /** TrendingEntityResponse */
        TrendingEntityResponse: {
            /** Entity Id */
            entity_id: number | null;
            /** Entity Slug */
            entity_slug?: string | null;
            /**
             * Count
             * @description Event count
             */
            count: number;
        };
        /** TrendingListResponse */
        TrendingListResponse: {
            /** Entity Type */
            entity_type: string;
            /** Event Type */
            event_type: string;
            /** Period Days */
            period_days: number;
            /** Trending */
            trending: components["schemas"]["TrendingEntityResponse"][];
        };
        /** UserCreate */
        UserCreate: {
            /** Name */
            name: string;
            /** Username */
            username: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Password
             * @description Plain password (will be hashed)
             */
            password: string;
            /** Address */
            address?: string | null;
            /** Phone */
            phone?: string | null;
            /** Thumbnail */
            thumbnail?: string | null;
            /**
             * Role
             * @description Role name (converted to role_id)
             */
            role?: string | null;
        };
        /** UserResponse */
        UserResponse: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Username */
            username: string;
            /** Role */
            role?: string | null;
            /** Email */
            email: string;
            /** Address */
            address?: string | null;
            /** Phone */
            phone?: string | null;
            /** Thumbnail */
            thumbnail?: string | null;
            /** Status */
            status: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** UserUpdate */
        UserUpdate: {
            /** Name */
            name?: string | null;
            /** Username */
            username?: string | null;
            /** Email */
            email?: string | null;
            /** Password */
            password?: string | null;
            /** Address */
            address?: string | null;
            /** Phone */
            phone?: string | null;
            /** Thumbnail */
            thumbnail?: string | null;
            /** Status */
            status?: string | null;
            /** Role */
            role?: string | null;
        };
        /** ValidationErrorResponse */
        ValidationErrorResponse: {
            /**
             * @description Response code, use from Status Code
             * @example VALIDATION_ERROR
             */
            message_code: components["schemas"]["MessageCode"];
            /**
             * Detail
             * @description List of error details, similar to Pydantic validation errors
             */
            detail: components["schemas"]["ErrorDetail"][];
            /**
             * Input
             * @description Input data that caused the error
             */
            input?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * ValueChain
         * @enum {string}
         */
        ValueChain: "PRIMARY PRODUCT" | "PROCESSED PRODUCT" | "ENVIRONMENTAL SERVICE";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    log_activity_analytics_log_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogActivityRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_activity_logs_analytics_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_ActivityLogDetailResponse_-Output"] | components["schemas"]["BaseResponse_ActivityLogDetailResponse_"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_entity_stats_analytics__entity_type___entity_id__stats_get: {
        parameters: {
            query?: {
                /** @description Comma-separated event types */
                event_types?: string | null;
                /** @description Filter by access type */
                access_type?: components["schemas"]["AccessType"] | null;
                /** @description Start date */
                start_date?: string | null;
                /** @description End date */
                end_date?: string | null;
            };
            header?: never;
            path: {
                entity_type: components["schemas"]["EntityType"];
                entity_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_EntityStatsResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_trending_entities_analytics_trending__entity_type__get: {
        parameters: {
            query?: {
                /** @description Event type to track */
                event_type?: components["schemas"]["EventType"];
                /** @description Maximum number of results */
                limit?: number;
                /** @description Number of days to look back */
                days?: number;
            };
            header?: never;
            path: {
                entity_type: components["schemas"]["EntityType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_TrendingListResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_event_count_analytics__entity_type___entity_id__count__event_type__get: {
        parameters: {
            query?: {
                /** @description Filter by access type */
                access_type?: components["schemas"]["AccessType"] | null;
            };
            header?: never;
            path: {
                entity_type: components["schemas"]["EntityType"];
                entity_id: number;
                event_type: components["schemas"]["EventType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_Dict_str__Any__"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    login_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_login_auth_login_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    register_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    refresh_token_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    logout_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    revoke_all_tokens_auth_revoke_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_certifications_certifications_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_CertificationResponse_-Output"] | components["schemas"]["BaseResponse_CertificationResponse_"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_certification_certifications_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CertificationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_CertificationResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_certification_certifications__certification_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                certification_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_CertificationResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_certification_certifications__certification_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                certification_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CertificationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_CertificationResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_certification_certifications__certification_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                certification_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_commodities_commodities_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_CommodityResponse_"] | components["schemas"]["BaseResponse_CommodityResponse_"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_commodity_commodities_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommodityCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_CommodityResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_commodity_commodities__commodity_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commodity_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_CommodityResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_commodity_commodities__commodity_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commodity_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommodityUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_CommodityResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_commodity_commodities__commodity_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commodity_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_commodities_by_category_commodities_category__category__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                category: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_CommodityResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_province_apis_harvesting_province_apis_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_ProvinceAPIResponse_-Output"] | components["schemas"]["BaseResponse_ProvinceAPIResponse_"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_province_api_harvesting_province_apis_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProvinceAPICreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_ProvinceAPIResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_province_api_harvesting_province_apis__api_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_ProvinceAPIResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_province_api_harvesting_province_apis__api_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProvinceAPIUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_ProvinceAPIResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_province_api_harvesting_province_apis__api_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    harvest_province_api_harvesting_harvest__api_id__post: {
        parameters: {
            query?: {
                is_background?: boolean;
            };
            header?: never;
            path: {
                api_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_HarvestingRunResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    harvest_all_province_apis_harvesting_harvest_all_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_harvesting_status_harvesting_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    validate_province_api_harvesting_validate_api_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_validate_province_api_harvesting_validate_api_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_APIValidationResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_scheduled_jobs_harvesting_scheduler_jobs_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_list_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    add_daily_job_harvesting_scheduler_jobs_daily_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_add_daily_job_harvesting_scheduler_jobs_daily_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    add_hourly_job_harvesting_scheduler_jobs_hourly_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": number;
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    add_weekly_job_harvesting_scheduler_jobs_weekly_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_add_weekly_job_harvesting_scheduler_jobs_weekly_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    add_custom_job_harvesting_scheduler_jobs_custom_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_add_custom_job_harvesting_scheduler_jobs_custom_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    remove_job_harvesting_scheduler_jobs__job_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    pause_job_harvesting_scheduler_jobs__job_id__pause_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    resume_job_harvesting_scheduler_jobs__job_id__resume_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_job_status_harvesting_scheduler_jobs__job_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_task_status_harvesting_tasks__task_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    cancel_task_harvesting_tasks__task_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_queue_stats_harvesting_queue_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    cleanup_old_tasks_harvesting_queue_cleanup_post: {
        parameters: {
            query?: {
                older_than_hours?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    health_check_harvesting_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_dict_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_files_files_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_FileResponse_-Output"] | components["schemas"]["BaseResponse_FileResponse_"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    upload_file_files_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_file_files_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_Union_FileResponse__NoneType__"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_file_files__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_FileResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_file_object_files__object_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                object_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_file_files__object_name__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                object_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_financings_financing_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_FinancingResponse_"] | components["schemas"]["BaseResponse_FinancingResponse_"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_financing_financing_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FinancingCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_FinancingResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_financing_financing__financing_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                financing_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_FinancingResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_financing_financing__financing_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                financing_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FinancingUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_FinancingResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_financing_financing__financing_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                financing_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_financings_by_type_financing_type__financing_type__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Financing type */
                financing_type: components["schemas"]["FinancingTypeEnum"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_FinancingResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_locations_locations_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_LocationResponse_"] | components["schemas"]["BaseResponse_LocationResponse_"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_location_locations_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LocationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_LocationResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_location_locations__location_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                location_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_LocationResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_location_locations__location_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                location_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LocationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_LocationResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_location_locations__location_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                location_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_locations_by_province_locations_province__province__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                province: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_LocationResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_nearby_locations_locations_nearby_get: {
        parameters: {
            query: {
                /** @description Latitude coordinate */
                latitude: number;
                /** @description Longitude coordinate */
                longitude: number;
                /** @description Search radius in kilometers */
                radius?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_LocationResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_products_products_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_Product_-Output"] | components["schemas"]["BaseResponse_Product_"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_product_products_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_Union_Product__NoneType__"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_product_products__product_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_Product_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_product_full_products__product_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_Union_Product__NoneType__"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_product_products__product_id__delete: {
        parameters: {
            query?: {
                permanent?: boolean;
            };
            header?: never;
            path: {
                product_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patch_product_products__product_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_Union_Product__NoneType__"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_settings_settings_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_Union_SettingResponse__Dict_str__Any___-Output"] | components["schemas"]["BaseResponse_Union_SettingResponse__Dict_str__Any___"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_setting_settings_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SettingCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_SettingResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_setting_settings__key__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_SettingResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_setting_full_settings__key__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SettingUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_SettingResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_setting_settings__key__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patch_setting_settings__key__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SettingUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_SettingResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_social_forestry_group_list_social_forestry_groups_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_SocialForestryGroupResponse_-Output"] | components["schemas"]["BaseResponse_SocialForestryGroupResponse_"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_social_forestry_group_social_forestry_groups_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SocialForestryGroupCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_SocialForestryGroupResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_social_forestry_group_social_forestry_groups__social_forestry_group_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                social_forestry_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_SocialForestryGroupResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_social_forestry_group_full_social_forestry_groups__social_forestry_group_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                social_forestry_group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SocialForestryGroupUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_SocialForestryGroupResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_social_forestry_group_social_forestry_groups__social_forestry_group_id__delete: {
        parameters: {
            query?: {
                permanent?: boolean;
            };
            header?: never;
            path: {
                social_forestry_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patch_social_forestry_group_social_forestry_groups__social_forestry_group_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                social_forestry_group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SocialForestryGroupUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_SocialForestryGroupResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_users_users_get: {
        parameters: {
            query?: {
                /** @description Full-text search query. Use this parameter to search across multiple fields in the resource. */
                search?: string | null;
                /** @description Strapi-style filter configuration. Supports nested filtering using bracket notation, e.g. filters[username][$eq]=John. Accepts either a JSON string or repeated query parameters. */
                filters?: string | null;
                /** @description Populate configuration for including related resources. Can specify relations to populate, e.g. populate=profile or populate[profile][fields][0]=avatar. Accepts a JSON string or repeated query parameters. */
                populate?: string | null;
                /** @description List of fields to include in the response. Can be a comma-separated string or repeated fields parameters, e.g. fields=name&fields=email. */
                fields?: string | null;
                /** @description Sorting configuration for results. Accepts a comma-separated string or repeated sort parameters, e.g. sort=createdAt:desc. */
                sort?: string | null;
                /** @description Pagination configuration. Supports page-based or offset-based pagination, e.g. pagination[page]=1&pagination[pageSize]=10. Accepts a JSON string or repeated query parameters. */
                pagination?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse_UserResponse_-Output"] | components["schemas"]["BaseResponse_UserResponse_"] | null;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_user_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_Union_UserResponse__NoneType__"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_user_users__username__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_UserResponse_"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_user_full_users__username__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_Union_UserResponse__NoneType__"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_user_users__username__delete: {
        parameters: {
            query?: {
                permanent?: boolean;
            };
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patch_user_users__username__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse_Union_UserResponse__NoneType__"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
